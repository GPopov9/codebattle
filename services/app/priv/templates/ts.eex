const originalStdoutWrite = process.stdout.write.bind(process.stdout);

import solution from './solution';
import { assert } from 'chai';
<%= imports %>

const buildResponse = (data) => `${JSON.stringify(data)}\n`;

let success: boolean = true;
let output: string = "";
const finalResult: Array<string> = [];
let solutionLambda;

process.stdout.write = (chunk: string): boolean => {
  if (typeof chunk === 'string') {
    output += chunk;
  }

  return true;
}

try {
  const assertSolution = (solutionLambda, expected, args) => {
    const start = Date.now();
    const result = solutionLambda();
    const executionTime = Date.now() - start;

    try {
      assert.deepEqual(result, expected);

      finalResult.push(
        buildResponse({
          status: 'success',
          result,
          output,
          expected,
          arguments: args,
          execution_time: executionTime
        })
      );
    } catch (err) {
      finalResult.push(
        buildResponse({
          status: 'failure',
          result,
          output,
          expected,
          arguments: args,
          execution_time: executionTime
        })
      );
      success = false;
    }

    output = "";
  };

  <%= for %{arguments: arguments, expected: expected, index: i} <- checks do %>
    <%= for  %{defining: defining, value: value} <- arguments.info do %>
      const <%= defining %> = <%= value %>;
    <% end %>
    const <%= expected.defining %> = <%= expected.value %>;
    solutionLambda = () => solution(<%= arguments.expression %>)

    assertSolution(
      solutionLambda,
      expected<%= i %>,
      [<%= arguments.expression %>]
    );
  <% end %>

  if (success) {
    finalResult.push(
      buildResponse({
        status: 'ok',
        result: <%= hash_sum %>,
      })
    );
  }
} catch (err) {
  finalResult.push(
    buildResponse({
      status: 'error',
      result: err.message,
    })
  );
}

process.stdout.write = originalStdoutWrite;
process.stdout.write(finalResult.join(""));
process.exit(0);
